
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = "${project.mcVersion }-${project.modVersion}"
group = 'com.domochevsky.quiverbow' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'QuiverBowRestrung'

minecraft {
    version = "${project.mcVersion}-${project.forgeVersion}"
    runDir = "run"
    mappings = project.mappingsVer
}

configurations {
	//Jars to package using ContainedDeps
	containedDep {
		transitive = false
	}
    shade
}

repositories 
{  
	maven 
	{
		name 'JEI'
        url 'http://dvs1.progwml6.com/files/maven'
    }
	mavenLocal()
}

dependencies 
{
    compile "daomephsta.umbra:umbra-java:${project.umbraJavaVersion}"
	deobfCompile "daomephsta.umbra:umbra-minecraft:${project.umbraMCVersion}"
	containedDep "daomephsta.umbra:umbra-java:${project.umbraJavaVersion}"
	containedDep "daomephsta.umbra:umbra-minecraft:${project.umbraMCVersion}"
	// compile against the JEI API
	deobfCompile "mezz.jei:jei_${project.jeiVersion}:api"
	// at runtime, use the full JEI jar
	runtime "mezz.jei:jei_${project.jeiVersion}"
    def brigadier = 'com.mojang:brigadier:1.0.17'
	implementation brigadier
	shade brigadier
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

import java.util.jar.*
boolean hasContainedDepMetadata(File file) 
{
    def jar = new JarFile(file)
    if (jar.manifest == null) return;
    def hasMetadata = jar.manifest.mainAttributes.containsKey(new Attributes.Name('Maven-Artifact'))
    jar.close()
    return hasMetadata
}

task generateDependencyMetaFiles {doLast{
	//Delete any previous meta files
	file("${buildDir}/dependencyMeta").deleteDir()
	//Generate new meta files
	configurations.containedDep.resolvedConfiguration.resolvedArtifacts.each {
        //Ignore files that define the dependency metadata themselves
        if (hasContainedDepMetadata(it.file)) return;
		def metaFile = file("${buildDir}/dependencyMeta/${it.file.name}.meta")
		metaFile.parentFile.mkdirs()
		//The newline is very important
		metaFile.text = "Maven-Artifact: ${it.moduleVersion.id}\n"
	}
}}

reobfJar {
    addExtraSrgLine 'PK: com/mojang/brigadier com/domochevsky/quiverbow/shadow/com/mojang/brigadier'
}

jar {
    //Package contained dependencies
	into('/META-INF/libraries') {
		from configurations.containedDep, file("${buildDir}/dependencyMeta")
	}
	configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
            into 'com/domochevsky/quiverbow/shadow/'
        }
    }
    //Include licenses
    from('.') {
        include 'LICENSE.md'
		include 'NOTICE.txt'
		include 'licenses/**'
    }
	//Add contained dependencies to the manifest
	manifest {
		attributes 'ContainedDeps': configurations.containedDep.collect {it.name}.join(' ')
	}
	
	dependsOn generateDependencyMetaFiles
}
