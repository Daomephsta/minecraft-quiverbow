
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = "${project.modVersion}+MC${project.mcVersion}"
group = 'com.domochevsky.quiverbow' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'QuiverBowRestrung'

sourceCompatibility = targetCompatibility = 8;

minecraft {
    version = "${project.mcVersion}-${project.forgeVersion}"
    runDir = "run"
    mappings = project.mappingsVer

    replace 'GRADLE:VERSION', project.modVersion
}

configurations {
    shade
}

repositories 
{  
	maven 
	{
		name 'JEI'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven 
    { 
        name 'Patchouli'
    	url 'https://maven.blamejared.com/' 
    }
}

dependencies 
{
	// compile against the JEI API
	deobfCompile "mezz.jei:jei_${project.jeiVersion}:api"
	// at runtime, use the full JEI jar
	runtime "mezz.jei:jei_${project.jeiVersion}"
    def brigadier = 'com.mojang:brigadier:1.0.17'
	implementation brigadier
	shade brigadier
    deobfCompile "vazkii.patchouli:Patchouli:${project.patchouliVersion}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

reobfJar {
    addExtraSrgLine 'PK: com/mojang/brigadier com/domochevsky/quiverbow/shadow/com/mojang/brigadier'
}

jar {
	configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
            into 'com/domochevsky/quiverbow/shadow/'
        }
    }
    //Include project license
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}"}
	}
    //Include dependency licenses
    from('.') {
		include 'NOTICE.txt'
		include 'licenses/**'
    }
}

compileJava {
	options.fork = true
	file(System.env.JAVA_HOME).parentFile.eachDir { dir ->
		def releaseFile = new File(dir, 'release')
		if (releaseFile.exists())
		{
			releaseFile.withInputStream { input->
				def releaseProps = new Properties()
				releaseProps.load(input)
				if (releaseProps.JAVA_VERSION.startsWith('"1.8'))
				{
					options.forkOptions.javaHome = dir
					println("Compiling with $dir")
				}
			}
		}
	}
	// Java 8 is required for compilation because compiling with JDK 9 breaks code using NIO buffers
	if (!options.forkOptions.javaHome)
		ant.fail('Could not find Java 8 JDK')
}

task manualChecks(type: PromptTask) {
    prompts = [
        'Launches On Dedicated Server': 'N'
    ]
    processor { responses ->
        if (!responses['Launches On Dedicated Server'].equalsIgnoreCase("Y"))
            throw new IllegalArgumentException('Mod has not been tested on a dedicated server')
    }
}
extractMcpMappings.dependsOn manualChecks //Run very early

import java.util.Properties
class PromptTask extends DefaultTask {
    @Input
    Map<String, String> prompts = [:]
    Action<Properties> processor = null

    def processor(Action<Properties> processor)
    {
        this.processor = processor
    }

    private String pickEditor() {
        def osName = System.getProperty("os.name").toLowerCase(Locale.ROOT)
        if (osName.contains("windows"))
            return "notepad";
        else if (osName.contains("linux"))
            return "nano";
        else if (osName.contains("mac os"))
            return "open"
        else
            throw new IllegalArgumentException("Unknown OS ${System.getProperty("os.name")}")
    }

    @TaskAction
    def doPrompt() {
        def promptsFile = File.createTempFile("manualChecks", ".txt", temporaryDir)
        promptsFile.deleteOnExit();

        def prompts = new Properties();
        this.prompts.each prompts.&setProperty
        promptsFile.withWriter {prompts.store(it, "Edit properties and close editor")}

        def editorProcess = new ProcessBuilder(pickEditor(), promptsFile.path)
            .directory(temporaryDir)
            .inheritIO()
            .start()
        editorProcess.waitFor()
        promptsFile.withReader prompts.&load
        processor.execute prompts
    }
}